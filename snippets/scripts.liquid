<script type="importmap">
  {
    "imports": {
      "@theme/critical": "{{ 'critical.js' | asset_url }}",
      "@theme/product-title": "{{ 'product-title-truncation.js' | asset_url }}",
      "@theme/component": "{{ 'component.js' | asset_url }}",
      "@theme/dialog": "{{ 'dialog.js' | asset_url }}",
      "@theme/events": "{{ 'events.js' | asset_url }}",
      "@theme/focus": "{{ 'focus.js' | asset_url }}",
      "@theme/morph": "{{ 'morph.js' | asset_url }}",
      "@theme/paginated-list": "{{ 'paginated-list.js' | asset_url }}",
      "@theme/performance": "{{ 'performance.js' | asset_url }}",
      "@theme/product-form": "{{ 'product-form.js' | asset_url }}",
      "@theme/recently-viewed-products": "{{ 'recently-viewed-products.js' | asset_url }}",
      "@theme/scrolling": "{{ 'scrolling.js' | asset_url }}",
      "@theme/section-renderer": "{{ 'section-renderer.js' | asset_url }}",
      "@theme/section-hydration": "{{ 'section-hydration.js' | asset_url }}",
      "@theme/utilities": "{{ 'utilities.js' | asset_url }}",
      "@theme/variant-picker": "{{ 'variant-picker.js' | asset_url }}",
      "@theme/media-gallery": "{{ 'media-gallery.js' | asset_url }}",
      "@theme/quick-add": "{{ 'quick-add.js' | asset_url }}",
      "@theme/paginated-list-aspect-ratio": "{{ 'paginated-list-aspect-ratio.js' | asset_url }}"
    }
  }
</script>

{% if settings.transition_to_main_product %}
  {% # theme-check-disable ParserBlockingScript %}
  <script
    src="{{ 'view-transitions.js' | asset_url }}"
    async
    blocking="render"
  ></script>
  {% # theme-check-enable %}
{% endif %}

<link
  rel="modulepreload"
  href="{{ 'critical.js' | asset_url }}"
>

<link
  rel="modulepreload"
  href="{{ 'utilities.js' | asset_url }}"
  fetchpriority="low"
>
<link
  rel="modulepreload"
  href="{{ 'component.js' | asset_url }}"
  fetchpriority="low"
>
<link
  rel="modulepreload"
  href="{{ 'section-renderer.js' | asset_url }}"
  fetchpriority="low"
>
<link
  rel="modulepreload"
  href="{{ 'section-hydration.js' | asset_url }}"
  fetchpriority="low"
>
<link
  rel="modulepreload"
  href="{{ 'morph.js' | asset_url }}"
  fetchpriority="low"
>

{% if template.name == 'collection' or template.name == 'search' %}
  <link
    rel="modulepreload"
    href="{{ 'paginated-list-aspect-ratio.js' | asset_url }}"
    fetchpriority="low"
  >
  <link
    rel="modulepreload"
    href="{{ 'paginated-list.js' | asset_url }}"
    fetchpriority="low"
  >

  <link
    rel="modulepreload"
    href="{{ 'product-title-truncation.js' | asset_url }}"
    fetchpriority="low"
  >
{% endif %}

<link
  rel="modulepreload"
  href="{{ 'focus.js' | asset_url }}"
  fetchpriority="low"
>
<link
  rel="modulepreload"
  href="{{ 'recently-viewed-products.js' | asset_url }}"
  fetchpriority="low"
>
<link
  rel="modulepreload"
  href="{{ 'scrolling.js' | asset_url }}"
  fetchpriority="low"
>
<link
  rel="modulepreload"
  href="{{ 'events.js' | asset_url }}"
  fetchpriority="low"
>
<script
  src="{{ 'quick-add.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
{% if settings.show_add_discount_code %}
  <script
    src="{{ 'cart-discount.js' | asset_url }}"
    type="module"
    fetchpriority="low"
  ></script>
{% endif %}
<script
  src="{{ 'dialog.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'variant-picker.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'product-card.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'product-form.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'accordion-custom.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'media.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'product-price.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'product-title-truncation.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'product-inventory.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'show-more.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'slideshow.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'anchored-popover.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'floating-panel.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'video-background.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'component-quantity-selector.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'media-gallery.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'rte-formatter.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>
<script
  src="{{ 'gift-card-recipient-form.js' | asset_url }}"
  type="module"
  fetchpriority="low"
></script>

{% if localization.available_countries.size > 1 or localization.available_languages.size > 1 %}
  <script
    src="{{ 'localization.js' | asset_url }}"
    type="module"
    fetchpriority="low"
  ></script>
{% endif %}

{% if template == 'product' %}
  <script type="module">
    import { RecentlyViewed } from '@theme/recently-viewed-products';
    RecentlyViewed.addProduct('{{ product.id }}');
  </script>
{% endif %}

{% if settings.transition_to_main_product %}
  <script
    src="{{ 'product-card-link.js' | asset_url }}"
    type="module"
    fetchpriority="low"
  ></script>
{% endif %}

<script
  src="{{ 'auto-close-details.js' | asset_url }}"
  defer="defer"
></script>

<script>
  const basePath = 'https://cdn.shopify.com/static/themes/horizon/placeholders';
  const Theme = {
    placeholders: {
      general: [
        `${basePath}/general-1.png`,
        `${basePath}/general-2.png`,
        `${basePath}/general-3.png`,
        `${basePath}/general-4.png`,
        `${basePath}/general-5.png`,
        `${basePath}/general-6.png`,
        `${basePath}/general-7.png`,
      ],
      product: [`${basePath}/product-ball.png`, `${basePath}/product-cone.png`, `${basePath}/product-cube.png`],
    },
    translations: {
      placeholder_image: `{{ 'content.placeholder_image' | t }}`,
      added: `{{ 'actions.added' | t }}`,
      recipient_form_fields_visible: `{{ 'content.recipient_form_fields_visible' | t }}`,
      recipient_form_fields_hidden: `{{ 'content.recipient_form_fields_hidden' | t }}`,
      recipient_form_error: `{{ 'content.recipient_form_error' | t }}`,
    },
    routes: {
      cart_add_url: '{{ routes.cart_add_url | append: '.js' }}',
      cart_change_url: '{{ routes.cart_change_url }}',
      cart_update_url: '{{ routes.cart_update_url }}',
      cart_url: '{{ routes.cart_url }}',
      predictive_search_url: '{{ routes.predictive_search_url }}',
      search_url: '{{ routes.search_url }}',
    },
    template: {
      name: '{{ template }}',
    },
  };
</script>
/* ============================================
   Gift Guide JS â€” Vanilla only, no jQuery
   ============================================ */

(function () {
  // Helper: money formatting using shop's money format if present
  function formatMoney(cents) {
    if (typeof window.Shopify !== 'undefined' && Shopify.formatMoney) {
      return Shopify.formatMoney(cents, document.documentElement.getAttribute('data-money-format') || '{{amount_no_decimals_with_comma_separator}}');
    }
    return (cents / 100).toLocaleString(undefined, { style: 'currency', currency: (window.Shopify && Shopify.currency && Shopify.currency.active) || 'USD' });
  }

  // State kept in-memory for the modal
  const state = {
    product: null, // full JSON
    selected: {},  // option name -> value
    softJacketFirstVariant: null // variant id for the auto-add rule
  };

  // Elements
  const overlay = document.querySelector('.gift-modal__overlay');
  const modal = document.querySelector('.gift-modal');
  const panel = document.querySelector('.gift-modal__panel');

  if (!overlay || !modal || !panel) return; // Section may not be on this page

  // Fields in panel
  const thumbEl  = panel.querySelector('[data-thumb]');
  const titleEl  = panel.querySelector('[data-title]');
  const priceEl  = panel.querySelector('[data-price]');
  const descEl   = panel.querySelector('[data-desc]');
  const formEl   = panel.querySelector('[data-form]');
  const addBtn   = panel.querySelector('[data-add]');
  const errorEl  = panel.querySelector('[data-error]');
  const closeBtn = panel.querySelector('[data-close]');

  // Open/Close
  function openModal() {
    overlay.classList.add('is-open');
    document.documentElement.style.overflow = 'hidden';
  }
  function closeModal() {
    overlay.classList.remove('is-open');
    document.documentElement.style.overflow = '';
    // Reset
    formEl.innerHTML = '';
    state.product = null;
    state.selected = {};
    errorEl.style.display = 'none';
  }
  overlay.addEventListener('click', closeModal);
  closeBtn.addEventListener('click', closeModal);
  document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeModal(); });

  // Build option UI dynamically
  function buildOptions(product) {
    formEl.innerHTML = '';

    product.options.forEach((opt, idx) => {
      const optWrap = document.createElement('div');
      const label = document.createElement('label');
      label.textContent = opt.name;
      label.style.fontWeight = '600';
      label.style.display = 'block';
      label.style.marginBottom = '6px';
      optWrap.appendChild(label);

      // "Color" swatches as buttons, "Size" as select, others as select
      if (/color/i.test(opt.name)) {
        const sw = document.createElement('div');
        sw.className = 'gift-swatch';
        const values = Array.from(new Set(product.variants.map(v => v.options[idx]))); // unique values for this option
        values.forEach(val => {
          const b = document.createElement('button');
          b.type = 'button';
          b.className = 'gift-swatch__btn';
          b.setAttribute('data-opt-index', idx);
          b.setAttribute('data-opt-name', opt.name);
          b.setAttribute('data-opt-value', val);
          b.setAttribute('aria-pressed', 'false');
          b.textContent = val;
          b.addEventListener('click', () => {
            // toggle pressed on same-level buttons
            sw.querySelectorAll('.gift-swatch__btn').forEach(x => x.setAttribute('aria-pressed', 'false'));
            b.setAttribute('aria-pressed', 'true');
            state.selected[opt.name] = val;
            updatePriceForSelection();
          });
          sw.appendChild(b);
        });
        optWrap.appendChild(sw);
      } else {
        const sel = document.createElement('select');
        sel.className = 'gift-select';
        sel.setAttribute('data-opt-index', idx);
        sel.setAttribute('data-opt-name', opt.name);
        sel.appendChild(new Option('Choose your ' + opt.name.toLowerCase(), '', true, true));
        const values = Array.from(new Set(product.variants.map(v => v.options[idx])));
        values.forEach(val => sel.appendChild(new Option(val, val)));
        sel.addEventListener('change', () => {
          state.selected[opt.name] = sel.value;
          updatePriceForSelection();
        });
        optWrap.appendChild(sel);
      }

      formEl.appendChild(optWrap);
    });
  }

  // Find variant matching state.selected
  function findVariant() {
    if (!state.product) return null;
    const opts = state.product.options;
    return state.product.variants.find(v => {
      return opts.every((opt, i) => {
        const want = state.selected[opt.name];
        return want ? v.options[i] === want : true; // allow partial until all selected
      });
    }) || null;
  }

  function allSelected() {
    if (!state.product) return false;
    return state.product.options.every(opt => !!state.selected[opt.name]);
  }

  function updatePriceForSelection() {
    const v = findVariant();
    if (v) priceEl.textContent = formatMoney(v.price);
  }

  // Add to cart with special rule
  async function addToCart(variantId, qty) {
    const res = await fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ items: [{ id: variantId, quantity: qty }] })
    });
    if (!res.ok) throw new Error('Failed to add to cart');
    return res.json();
  }

  // Rule: if options include Black and Medium, auto-add Soft Winter Jacket
  function isBlackMedium(variant) {
    const lower = variant.options.map(o => (o || '').toLowerCase());
    return lower.includes('black') && lower.includes('medium');
  }

  // Bind dots
  document.querySelectorAll('[data-open-product]').forEach(btn => {
    btn.addEventListener('click', () => {
      const json = btn.getAttribute('data-product-json');
      if (!json) return;
      const product = JSON.parse(json);
      state.product = product;
      // modal content
      thumbEl.innerHTML = `<img src="${(product.featured_image && product.featured_image.src) || (product.images[0] && product.images[0].src) || ''}" alt="">`;
      titleEl.textContent = product.title;
      priceEl.textContent = formatMoney(product.price);
      descEl.textContent = (product.description || '').replace(/<[^>]+>/g, '').trim();

      // optional: store soft jacket first variant for rule, if present in dataset
      state.softJacketFirstVariant = document.querySelector('[data-soft-jacket-variant]')?.getAttribute('data-soft-jacket-variant') || null;

      buildOptions(product);
      addBtn.disabled = false;
      openModal();
    });
  });

  // Add to cart click
  addBtn.addEventListener('click', async () => {
    errorEl.style.display = 'none';

    if (!state.product) return;
    if (!allSelected() && state.product.variants.length > 1) {
      errorEl.textContent = 'Please choose all options.';
      errorEl.style.display = 'block';
      return;
    }
    const variant = findVariant() || state.product.variants[0];

    try {
      await addToCart(variant.id, 1);

      // Special rule
      if (isBlackMedium(variant) && state.softJacketFirstVariant) {
        try {
          await addToCart(Number(state.softJacketFirstVariant), 1);
        } catch (e) {
          console.warn('Auto-add Soft Winter Jacket failed:', e);
        }
      }

      // Optionally redirect to cart or show toast; here we close modal
      closeModal();
      // Simple feedback
      if (window.Shopify && Shopify.designMode) {
        alert('Added to cart (Theme Editor preview).');
      }
    } catch (e) {
      errorEl.textContent = 'Could not add to cart. Please try again.';
      errorEl.style.display = 'block';
    }
  });
})();
